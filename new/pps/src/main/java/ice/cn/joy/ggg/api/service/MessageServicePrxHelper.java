// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cn.joy.ggg.api.service;

// <auto-generated>
//
// Generated from file `message.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class MessageServicePrxHelper extends Ice.ObjectPrxHelperBase implements MessageServicePrx
{
    public cn.joy.ggg.api.model.MessageResponse
    getMessageList(String source, int start, int count)
    {
        return getMessageList(source, start, count, null, false);
    }

    public cn.joy.ggg.api.model.MessageResponse
    getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx)
    {
        return getMessageList(source, start, count, __ctx, true);
    }

    private cn.joy.ggg.api.model.MessageResponse
    getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMessageList");
                __delBase = __getDelegate(false);
                _MessageServiceDel __del = (_MessageServiceDel)__delBase;
                return __del.getMessageList(source, start, count, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMessageList_name = "getMessageList";

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count)
    {
        return begin_getMessageList(source, start, count, null, false, null);
    }

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx)
    {
        return begin_getMessageList(source, start, count, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count, Ice.Callback __cb)
    {
        return begin_getMessageList(source, start, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessageList(source, start, count, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count, Callback_MessageService_getMessageList __cb)
    {
        return begin_getMessageList(source, start, count, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx, Callback_MessageService_getMessageList __cb)
    {
        return begin_getMessageList(source, start, count, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMessageList(String source, int start, int count, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessageList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMessageList_name, __cb);
        try
        {
            __result.__prepare(__getMessageList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(source);
            __os.writeInt(start);
            __os.writeInt(count);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.MessageResponse end_getMessageList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMessageList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.MessageResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.MessageResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.MessageResponse
    removeMessage(String source, int msgId)
    {
        return removeMessage(source, msgId, null, false);
    }

    public cn.joy.ggg.api.model.MessageResponse
    removeMessage(String source, int msgId, java.util.Map<String, String> __ctx)
    {
        return removeMessage(source, msgId, __ctx, true);
    }

    private cn.joy.ggg.api.model.MessageResponse
    removeMessage(String source, int msgId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeMessage");
                __delBase = __getDelegate(false);
                _MessageServiceDel __del = (_MessageServiceDel)__delBase;
                return __del.removeMessage(source, msgId, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeMessage_name = "removeMessage";

    public Ice.AsyncResult begin_removeMessage(String source, int msgId)
    {
        return begin_removeMessage(source, msgId, null, false, null);
    }

    public Ice.AsyncResult begin_removeMessage(String source, int msgId, java.util.Map<String, String> __ctx)
    {
        return begin_removeMessage(source, msgId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeMessage(String source, int msgId, Ice.Callback __cb)
    {
        return begin_removeMessage(source, msgId, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String source, int msgId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeMessage(source, msgId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String source, int msgId, Callback_MessageService_removeMessage __cb)
    {
        return begin_removeMessage(source, msgId, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeMessage(String source, int msgId, java.util.Map<String, String> __ctx, Callback_MessageService_removeMessage __cb)
    {
        return begin_removeMessage(source, msgId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeMessage(String source, int msgId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeMessage_name, __cb);
        try
        {
            __result.__prepare(__removeMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(source);
            __os.writeInt(msgId);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.MessageResponse end_removeMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.MessageResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.MessageResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.MessageResponse
    sendMessage(String source, String dest, String msg)
    {
        return sendMessage(source, dest, msg, null, false);
    }

    public cn.joy.ggg.api.model.MessageResponse
    sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx)
    {
        return sendMessage(source, dest, msg, __ctx, true);
    }

    private cn.joy.ggg.api.model.MessageResponse
    sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("sendMessage");
                __delBase = __getDelegate(false);
                _MessageServiceDel __del = (_MessageServiceDel)__delBase;
                return __del.sendMessage(source, dest, msg, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __sendMessage_name = "sendMessage";

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg)
    {
        return begin_sendMessage(source, dest, msg, null, false, null);
    }

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx)
    {
        return begin_sendMessage(source, dest, msg, __ctx, true, null);
    }

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, Ice.Callback __cb)
    {
        return begin_sendMessage(source, dest, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_sendMessage(source, dest, msg, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, Callback_MessageService_sendMessage __cb)
    {
        return begin_sendMessage(source, dest, msg, null, false, __cb);
    }

    public Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx, Callback_MessageService_sendMessage __cb)
    {
        return begin_sendMessage(source, dest, msg, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_sendMessage(String source, String dest, String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__sendMessage_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __sendMessage_name, __cb);
        try
        {
            __result.__prepare(__sendMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(source);
            __os.writeString(dest);
            __os.writeString(msg);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.MessageResponse end_sendMessage(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __sendMessage_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.MessageResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.MessageResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static MessageServicePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MessageServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::MessageService"))
                {
                    MessageServicePrxHelper __h = new MessageServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MessageServicePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MessageServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::MessageService", __ctx))
                {
                    MessageServicePrxHelper __h = new MessageServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MessageServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::MessageService"))
                {
                    MessageServicePrxHelper __h = new MessageServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MessageServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::MessageService", __ctx))
                {
                    MessageServicePrxHelper __h = new MessageServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MessageServicePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MessageServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                MessageServicePrxHelper __h = new MessageServicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MessageServicePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MessageServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MessageServicePrxHelper __h = new MessageServicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _MessageServiceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _MessageServiceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, MessageServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static MessageServicePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MessageServicePrxHelper result = new MessageServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
