// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cn.joy.ggg.api.service;

// <auto-generated>
//
// Generated from file `community.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class CommunityServicePrxHelper extends Ice.ObjectPrxHelperBase implements CommunityServicePrx
{
    public int
    addCollect(String userid, String title, String link)
    {
        return addCollect(userid, title, link, null, false);
    }

    public int
    addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx)
    {
        return addCollect(userid, title, link, __ctx, true);
    }

    private int
    addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addCollect");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.addCollect(userid, title, link, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addCollect_name = "addCollect";

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link)
    {
        return begin_addCollect(userid, title, link, null, false, null);
    }

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx)
    {
        return begin_addCollect(userid, title, link, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link, Ice.Callback __cb)
    {
        return begin_addCollect(userid, title, link, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addCollect(userid, title, link, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link, Callback_CommunityService_addCollect __cb)
    {
        return begin_addCollect(userid, title, link, null, false, __cb);
    }

    public Ice.AsyncResult begin_addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx, Callback_CommunityService_addCollect __cb)
    {
        return begin_addCollect(userid, title, link, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addCollect(String userid, String title, String link, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addCollect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addCollect_name, __cb);
        try
        {
            __result.__prepare(__addCollect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeString(title);
            __os.writeString(link);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_addCollect(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addCollect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel)
    {
        return addDevelopment(devel, null, false);
    }

    public int
    addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx)
    {
        return addDevelopment(devel, __ctx, true);
    }

    private int
    addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addDevelopment");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.addDevelopment(devel, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addDevelopment_name = "addDevelopment";

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel)
    {
        return begin_addDevelopment(devel, null, false, null);
    }

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx)
    {
        return begin_addDevelopment(devel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, Ice.Callback __cb)
    {
        return begin_addDevelopment(devel, null, false, __cb);
    }

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addDevelopment(devel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, Callback_CommunityService_addDevelopment __cb)
    {
        return begin_addDevelopment(devel, null, false, __cb);
    }

    public Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx, Callback_CommunityService_addDevelopment __cb)
    {
        return begin_addDevelopment(devel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addDevelopment(cn.joy.ggg.api.model.FriendDevelopment devel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addDevelopment_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addDevelopment_name, __cb);
        try
        {
            __result.__prepare(__addDevelopment_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            devel.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_addDevelopment(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addDevelopment_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc)
    {
        return addTopic(userid, tipoc, null, false);
    }

    public int
    addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx)
    {
        return addTopic(userid, tipoc, __ctx, true);
    }

    private int
    addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addTopic");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.addTopic(userid, tipoc, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addTopic_name = "addTopic";

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc)
    {
        return begin_addTopic(userid, tipoc, null, false, null);
    }

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx)
    {
        return begin_addTopic(userid, tipoc, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, Ice.Callback __cb)
    {
        return begin_addTopic(userid, tipoc, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTopic(userid, tipoc, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, Callback_CommunityService_addTopic __cb)
    {
        return begin_addTopic(userid, tipoc, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx, Callback_CommunityService_addTopic __cb)
    {
        return begin_addTopic(userid, tipoc, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addTopic(String userid, cn.joy.ggg.api.model.Topic tipoc, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addTopic_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addTopic_name, __cb);
        try
        {
            __result.__prepare(__addTopic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            tipoc.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_addTopic(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addTopic_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    encodeNotify(cn.joy.ggg.api.model.Topic topic)
    {
        encodeNotify(topic, null, false);
    }

    public void
    encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx)
    {
        encodeNotify(topic, __ctx, true);
    }

    private void
    encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                __del.encodeNotify(topic, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __encodeNotify_name = "encodeNotify";

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic)
    {
        return begin_encodeNotify(topic, null, false, null);
    }

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx)
    {
        return begin_encodeNotify(topic, __ctx, true, null);
    }

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, Ice.Callback __cb)
    {
        return begin_encodeNotify(topic, null, false, __cb);
    }

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_encodeNotify(topic, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, Callback_CommunityService_encodeNotify __cb)
    {
        return begin_encodeNotify(topic, null, false, __cb);
    }

    public Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, Callback_CommunityService_encodeNotify __cb)
    {
        return begin_encodeNotify(topic, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_encodeNotify(cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __encodeNotify_name, __cb);
        try
        {
            __result.__prepare(__encodeNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            topic.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_encodeNotify(Ice.AsyncResult __result)
    {
        __end(__result, __encodeNotify_name);
    }

    public cn.joy.ggg.api.model.PageSupport
    getFriendDevelopment(String userId, int pageNo, int pageSize)
    {
        return getFriendDevelopment(userId, pageNo, pageSize, null, false);
    }

    public cn.joy.ggg.api.model.PageSupport
    getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return getFriendDevelopment(userId, pageNo, pageSize, __ctx, true);
    }

    private cn.joy.ggg.api.model.PageSupport
    getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getFriendDevelopment");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getFriendDevelopment(userId, pageNo, pageSize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getFriendDevelopment_name = "getFriendDevelopment";

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, Ice.Callback __cb)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, Callback_CommunityService_getFriendDevelopment __cb)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Callback_CommunityService_getFriendDevelopment __cb)
    {
        return begin_getFriendDevelopment(userId, pageNo, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFriendDevelopment(String userId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFriendDevelopment_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFriendDevelopment_name, __cb);
        try
        {
            __result.__prepare(__getFriendDevelopment_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userId);
            __os.writeInt(pageNo);
            __os.writeInt(pageSize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.PageSupport end_getFriendDevelopment(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFriendDevelopment_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.PageSupport __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.PageSupport();
        __ret.__read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.PageSupport
    getList(String userid, int pageNo, int pageSize)
    {
        return getList(userid, pageNo, pageSize, null, false);
    }

    public cn.joy.ggg.api.model.PageSupport
    getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return getList(userid, pageNo, pageSize, __ctx, true);
    }

    private cn.joy.ggg.api.model.PageSupport
    getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getList");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getList(userid, pageNo, pageSize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getList_name = "getList";

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize)
    {
        return begin_getList(userid, pageNo, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_getList(userid, pageNo, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, Ice.Callback __cb)
    {
        return begin_getList(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getList(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, Callback_CommunityService_getList __cb)
    {
        return begin_getList(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Callback_CommunityService_getList __cb)
    {
        return begin_getList(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getList_name, __cb);
        try
        {
            __result.__prepare(__getList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeInt(pageNo);
            __os.writeInt(pageSize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.PageSupport end_getList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.PageSupport __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.PageSupport();
        __ret.__read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.PageSupport
    getScoringHistory(String userid, int pageNo, int pageSize)
    {
        return getScoringHistory(userid, pageNo, pageSize, null, false);
    }

    public cn.joy.ggg.api.model.PageSupport
    getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return getScoringHistory(userid, pageNo, pageSize, __ctx, true);
    }

    private cn.joy.ggg.api.model.PageSupport
    getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getScoringHistory");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getScoringHistory(userid, pageNo, pageSize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getScoringHistory_name = "getScoringHistory";

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, Ice.Callback __cb)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, Callback_CommunityService_getScoringHistory __cb)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Callback_CommunityService_getScoringHistory __cb)
    {
        return begin_getScoringHistory(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScoringHistory(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScoringHistory_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScoringHistory_name, __cb);
        try
        {
            __result.__prepare(__getScoringHistory_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeInt(pageNo);
            __os.writeInt(pageSize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.PageSupport end_getScoringHistory(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScoringHistory_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.PageSupport __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.PageSupport();
        __ret.__read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.PageSupport
    getSelfDevelopment(String selfId, int pageNo, int pageSize)
    {
        return getSelfDevelopment(selfId, pageNo, pageSize, null, false);
    }

    public cn.joy.ggg.api.model.PageSupport
    getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return getSelfDevelopment(selfId, pageNo, pageSize, __ctx, true);
    }

    private cn.joy.ggg.api.model.PageSupport
    getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSelfDevelopment");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getSelfDevelopment(selfId, pageNo, pageSize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSelfDevelopment_name = "getSelfDevelopment";

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, Ice.Callback __cb)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, Callback_CommunityService_getSelfDevelopment __cb)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Callback_CommunityService_getSelfDevelopment __cb)
    {
        return begin_getSelfDevelopment(selfId, pageNo, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSelfDevelopment(String selfId, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSelfDevelopment_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSelfDevelopment_name, __cb);
        try
        {
            __result.__prepare(__getSelfDevelopment_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(selfId);
            __os.writeInt(pageNo);
            __os.writeInt(pageSize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.PageSupport end_getSelfDevelopment(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSelfDevelopment_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.PageSupport __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.PageSupport();
        __ret.__read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.PageSupport
    getTopicList(String userid, int pageNo, int pageSize)
    {
        return getTopicList(userid, pageNo, pageSize, null, false);
    }

    public cn.joy.ggg.api.model.PageSupport
    getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return getTopicList(userid, pageNo, pageSize, __ctx, true);
    }

    private cn.joy.ggg.api.model.PageSupport
    getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getTopicList");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getTopicList(userid, pageNo, pageSize, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getTopicList_name = "getTopicList";

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize)
    {
        return begin_getTopicList(userid, pageNo, pageSize, null, false, null);
    }

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx)
    {
        return begin_getTopicList(userid, pageNo, pageSize, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, Ice.Callback __cb)
    {
        return begin_getTopicList(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTopicList(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, Callback_CommunityService_getTopicList __cb)
    {
        return begin_getTopicList(userid, pageNo, pageSize, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, Callback_CommunityService_getTopicList __cb)
    {
        return begin_getTopicList(userid, pageNo, pageSize, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTopicList(String userid, int pageNo, int pageSize, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTopicList_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTopicList_name, __cb);
        try
        {
            __result.__prepare(__getTopicList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeInt(pageNo);
            __os.writeInt(pageSize);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.PageSupport end_getTopicList(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTopicList_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.PageSupport __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.PageSupport();
        __ret.__read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.UserProfile
    getUser(String userid)
    {
        return getUser(userid, null, false);
    }

    public cn.joy.ggg.api.model.UserProfile
    getUser(String userid, java.util.Map<String, String> __ctx)
    {
        return getUser(userid, __ctx, true);
    }

    private cn.joy.ggg.api.model.UserProfile
    getUser(String userid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getUser");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.getUser(userid, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getUser_name = "getUser";

    public Ice.AsyncResult begin_getUser(String userid)
    {
        return begin_getUser(userid, null, false, null);
    }

    public Ice.AsyncResult begin_getUser(String userid, java.util.Map<String, String> __ctx)
    {
        return begin_getUser(userid, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUser(String userid, Ice.Callback __cb)
    {
        return begin_getUser(userid, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser(String userid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUser(userid, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUser(String userid, Callback_CommunityService_getUser __cb)
    {
        return begin_getUser(userid, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUser(String userid, java.util.Map<String, String> __ctx, Callback_CommunityService_getUser __cb)
    {
        return begin_getUser(userid, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUser(String userid, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUser_name, __cb);
        try
        {
            __result.__prepare(__getUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UserProfile end_getUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UserProfile __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UserProfile();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    removeCollect(String userid, String collectid)
    {
        return removeCollect(userid, collectid, null, false);
    }

    public int
    removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx)
    {
        return removeCollect(userid, collectid, __ctx, true);
    }

    private int
    removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeCollect");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.removeCollect(userid, collectid, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeCollect_name = "removeCollect";

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid)
    {
        return begin_removeCollect(userid, collectid, null, false, null);
    }

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx)
    {
        return begin_removeCollect(userid, collectid, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid, Ice.Callback __cb)
    {
        return begin_removeCollect(userid, collectid, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeCollect(userid, collectid, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid, Callback_CommunityService_removeCollect __cb)
    {
        return begin_removeCollect(userid, collectid, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx, Callback_CommunityService_removeCollect __cb)
    {
        return begin_removeCollect(userid, collectid, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeCollect(String userid, String collectid, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeCollect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeCollect_name, __cb);
        try
        {
            __result.__prepare(__removeCollect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeString(collectid);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_removeCollect(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeCollect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    removeTopic(String userid, String tid)
    {
        return removeTopic(userid, tid, null, false);
    }

    public int
    removeTopic(String userid, String tid, java.util.Map<String, String> __ctx)
    {
        return removeTopic(userid, tid, __ctx, true);
    }

    private int
    removeTopic(String userid, String tid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeTopic");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.removeTopic(userid, tid, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeTopic_name = "removeTopic";

    public Ice.AsyncResult begin_removeTopic(String userid, String tid)
    {
        return begin_removeTopic(userid, tid, null, false, null);
    }

    public Ice.AsyncResult begin_removeTopic(String userid, String tid, java.util.Map<String, String> __ctx)
    {
        return begin_removeTopic(userid, tid, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeTopic(String userid, String tid, Ice.Callback __cb)
    {
        return begin_removeTopic(userid, tid, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeTopic(String userid, String tid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeTopic(userid, tid, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeTopic(String userid, String tid, Callback_CommunityService_removeTopic __cb)
    {
        return begin_removeTopic(userid, tid, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeTopic(String userid, String tid, java.util.Map<String, String> __ctx, Callback_CommunityService_removeTopic __cb)
    {
        return begin_removeTopic(userid, tid, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeTopic(String userid, String tid, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeTopic_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeTopic_name, __cb);
        try
        {
            __result.__prepare(__removeTopic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            __os.writeString(tid);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_removeTopic(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeTopic_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.List<cn.joy.ggg.api.model.UserProfile>
    searchUser(cn.joy.ggg.api.model.UserProfile user)
    {
        return searchUser(user, null, false);
    }

    public java.util.List<cn.joy.ggg.api.model.UserProfile>
    searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx)
    {
        return searchUser(user, __ctx, true);
    }

    private java.util.List<cn.joy.ggg.api.model.UserProfile>
    searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("searchUser");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.searchUser(user, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __searchUser_name = "searchUser";

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user)
    {
        return begin_searchUser(user, null, false, null);
    }

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx)
    {
        return begin_searchUser(user, __ctx, true, null);
    }

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, Ice.Callback __cb)
    {
        return begin_searchUser(user, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchUser(user, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, Callback_CommunityService_searchUser __cb)
    {
        return begin_searchUser(user, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, Callback_CommunityService_searchUser __cb)
    {
        return begin_searchUser(user, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_searchUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __searchUser_name, __cb);
        try
        {
            __result.__prepare(__searchUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            user.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.List<cn.joy.ggg.api.model.UserProfile> end_searchUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __searchUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        java.util.List<cn.joy.ggg.api.model.UserProfile> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = cn.joy.ggg.api.model.ProfileListHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setTopic(String userid, cn.joy.ggg.api.model.Topic topic)
    {
        return setTopic(userid, topic, null, false);
    }

    public int
    setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx)
    {
        return setTopic(userid, topic, __ctx, true);
    }

    private int
    setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTopic");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.setTopic(userid, topic, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setTopic_name = "setTopic";

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic)
    {
        return begin_setTopic(userid, topic, null, false, null);
    }

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx)
    {
        return begin_setTopic(userid, topic, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, Ice.Callback __cb)
    {
        return begin_setTopic(userid, topic, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTopic(userid, topic, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, Callback_CommunityService_setTopic __cb)
    {
        return begin_setTopic(userid, topic, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, Callback_CommunityService_setTopic __cb)
    {
        return begin_setTopic(userid, topic, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTopic(String userid, cn.joy.ggg.api.model.Topic topic, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setTopic_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTopic_name, __cb);
        try
        {
            __result.__prepare(__setTopic_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userid);
            topic.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setTopic(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setTopic_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    setUser(cn.joy.ggg.api.model.UserProfile user)
    {
        return setUser(user, null, false);
    }

    public int
    setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx)
    {
        return setUser(user, __ctx, true);
    }

    private int
    setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setUser");
                __delBase = __getDelegate(false);
                _CommunityServiceDel __del = (_CommunityServiceDel)__delBase;
                return __del.setUser(user, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setUser_name = "setUser";

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user)
    {
        return begin_setUser(user, null, false, null);
    }

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx)
    {
        return begin_setUser(user, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, Ice.Callback __cb)
    {
        return begin_setUser(user, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUser(user, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, Callback_CommunityService_setUser __cb)
    {
        return begin_setUser(user, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, Callback_CommunityService_setUser __cb)
    {
        return begin_setUser(user, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUser(cn.joy.ggg.api.model.UserProfile user, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUser_name, __cb);
        try
        {
            __result.__prepare(__setUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            user.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_setUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static CommunityServicePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (CommunityServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::CommunityService"))
                {
                    CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CommunityServicePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (CommunityServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::CommunityService", __ctx))
                {
                    CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static CommunityServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::CommunityService"))
                {
                    CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CommunityServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::CommunityService", __ctx))
                {
                    CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static CommunityServicePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (CommunityServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static CommunityServicePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        CommunityServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            CommunityServicePrxHelper __h = new CommunityServicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _CommunityServiceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _CommunityServiceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, CommunityServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static CommunityServicePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CommunityServicePrxHelper result = new CommunityServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
