// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cn.joy.ggg.api.service;

// <auto-generated>
//
// Generated from file `uac.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class UACServicePrxHelper extends Ice.ObjectPrxHelperBase implements UACServicePrx
{
    public cn.joy.ggg.api.model.UACResponse
    changePassword(String userId, String oldpasswd, String newpasswd)
    {
        return changePassword(userId, oldpasswd, newpasswd, null, false);
    }

    public cn.joy.ggg.api.model.UACResponse
    changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx)
    {
        return changePassword(userId, oldpasswd, newpasswd, __ctx, true);
    }

    private cn.joy.ggg.api.model.UACResponse
    changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("changePassword");
                __delBase = __getDelegate(false);
                _UACServiceDel __del = (_UACServiceDel)__delBase;
                return __del.changePassword(userId, oldpasswd, newpasswd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changePassword_name = "changePassword";

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, null, false, null);
    }

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, Ice.Callback __cb)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, null, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, Callback_UACService_changePassword __cb)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, null, false, __cb);
    }

    public Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx, Callback_UACService_changePassword __cb)
    {
        return begin_changePassword(userId, oldpasswd, newpasswd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changePassword(String userId, String oldpasswd, String newpasswd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__changePassword_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changePassword_name, __cb);
        try
        {
            __result.__prepare(__changePassword_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userId);
            __os.writeString(oldpasswd);
            __os.writeString(newpasswd);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UACResponse end_changePassword(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __changePassword_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UACResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UACResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.UACResponse
    checkLogin(String userId, String token, String userIp)
    {
        return checkLogin(userId, token, userIp, null, false);
    }

    public cn.joy.ggg.api.model.UACResponse
    checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx)
    {
        return checkLogin(userId, token, userIp, __ctx, true);
    }

    private cn.joy.ggg.api.model.UACResponse
    checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("checkLogin");
                __delBase = __getDelegate(false);
                _UACServiceDel __del = (_UACServiceDel)__delBase;
                return __del.checkLogin(userId, token, userIp, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __checkLogin_name = "checkLogin";

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp)
    {
        return begin_checkLogin(userId, token, userIp, null, false, null);
    }

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx)
    {
        return begin_checkLogin(userId, token, userIp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, Ice.Callback __cb)
    {
        return begin_checkLogin(userId, token, userIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_checkLogin(userId, token, userIp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, Callback_UACService_checkLogin __cb)
    {
        return begin_checkLogin(userId, token, userIp, null, false, __cb);
    }

    public Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx, Callback_UACService_checkLogin __cb)
    {
        return begin_checkLogin(userId, token, userIp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_checkLogin(String userId, String token, String userIp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__checkLogin_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __checkLogin_name, __cb);
        try
        {
            __result.__prepare(__checkLogin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userId);
            __os.writeString(token);
            __os.writeString(userIp);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UACResponse end_checkLogin(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __checkLogin_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UACResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UACResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.UACListResponse
    getUserInfoById(String userId)
    {
        return getUserInfoById(userId, null, false);
    }

    public cn.joy.ggg.api.model.UACListResponse
    getUserInfoById(String userId, java.util.Map<String, String> __ctx)
    {
        return getUserInfoById(userId, __ctx, true);
    }

    private cn.joy.ggg.api.model.UACListResponse
    getUserInfoById(String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getUserInfoById");
                __delBase = __getDelegate(false);
                _UACServiceDel __del = (_UACServiceDel)__delBase;
                return __del.getUserInfoById(userId, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getUserInfoById_name = "getUserInfoById";

    public Ice.AsyncResult begin_getUserInfoById(String userId)
    {
        return begin_getUserInfoById(userId, null, false, null);
    }

    public Ice.AsyncResult begin_getUserInfoById(String userId, java.util.Map<String, String> __ctx)
    {
        return begin_getUserInfoById(userId, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserInfoById(String userId, Ice.Callback __cb)
    {
        return begin_getUserInfoById(userId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoById(String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserInfoById(userId, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoById(String userId, Callback_UACService_getUserInfoById __cb)
    {
        return begin_getUserInfoById(userId, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoById(String userId, java.util.Map<String, String> __ctx, Callback_UACService_getUserInfoById __cb)
    {
        return begin_getUserInfoById(userId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserInfoById(String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserInfoById_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserInfoById_name, __cb);
        try
        {
            __result.__prepare(__getUserInfoById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userId);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UACListResponse end_getUserInfoById(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserInfoById_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UACListResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UACListResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.UACListResponse
    getUserInfoByName(String userName)
    {
        return getUserInfoByName(userName, null, false);
    }

    public cn.joy.ggg.api.model.UACListResponse
    getUserInfoByName(String userName, java.util.Map<String, String> __ctx)
    {
        return getUserInfoByName(userName, __ctx, true);
    }

    private cn.joy.ggg.api.model.UACListResponse
    getUserInfoByName(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getUserInfoByName");
                __delBase = __getDelegate(false);
                _UACServiceDel __del = (_UACServiceDel)__delBase;
                return __del.getUserInfoByName(userName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getUserInfoByName_name = "getUserInfoByName";

    public Ice.AsyncResult begin_getUserInfoByName(String userName)
    {
        return begin_getUserInfoByName(userName, null, false, null);
    }

    public Ice.AsyncResult begin_getUserInfoByName(String userName, java.util.Map<String, String> __ctx)
    {
        return begin_getUserInfoByName(userName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getUserInfoByName(String userName, Ice.Callback __cb)
    {
        return begin_getUserInfoByName(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoByName(String userName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUserInfoByName(userName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoByName(String userName, Callback_UACService_getUserInfoByName __cb)
    {
        return begin_getUserInfoByName(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getUserInfoByName(String userName, java.util.Map<String, String> __ctx, Callback_UACService_getUserInfoByName __cb)
    {
        return begin_getUserInfoByName(userName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUserInfoByName(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUserInfoByName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUserInfoByName_name, __cb);
        try
        {
            __result.__prepare(__getUserInfoByName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UACListResponse end_getUserInfoByName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUserInfoByName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UACListResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UACListResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public cn.joy.ggg.api.model.UACResponse
    login(String userName, String password)
    {
        return login(userName, password, null, false);
    }

    public cn.joy.ggg.api.model.UACResponse
    login(String userName, String password, java.util.Map<String, String> __ctx)
    {
        return login(userName, password, __ctx, true);
    }

    private cn.joy.ggg.api.model.UACResponse
    login(String userName, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("login");
                __delBase = __getDelegate(false);
                _UACServiceDel __del = (_UACServiceDel)__delBase;
                return __del.login(userName, password, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __login_name = "login";

    public Ice.AsyncResult begin_login(String userName, String password)
    {
        return begin_login(userName, password, null, false, null);
    }

    public Ice.AsyncResult begin_login(String userName, String password, java.util.Map<String, String> __ctx)
    {
        return begin_login(userName, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_login(String userName, String password, Ice.Callback __cb)
    {
        return begin_login(userName, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String userName, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(userName, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_login(String userName, String password, Callback_UACService_login __cb)
    {
        return begin_login(userName, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String userName, String password, java.util.Map<String, String> __ctx, Callback_UACService_login __cb)
    {
        return begin_login(userName, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_login(String userName, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __login_name, __cb);
        try
        {
            __result.__prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userName);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public cn.joy.ggg.api.model.UACResponse end_login(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __login_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        cn.joy.ggg.api.model.UACResponse __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new cn.joy.ggg.api.model.UACResponse();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static UACServicePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (UACServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::UACService"))
                {
                    UACServicePrxHelper __h = new UACServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UACServicePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (UACServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::service::UACService", __ctx))
                {
                    UACServicePrxHelper __h = new UACServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static UACServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::UACService"))
                {
                    UACServicePrxHelper __h = new UACServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UACServicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::service::UACService", __ctx))
                {
                    UACServicePrxHelper __h = new UACServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static UACServicePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (UACServicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                UACServicePrxHelper __h = new UACServicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static UACServicePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        UACServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            UACServicePrxHelper __h = new UACServicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _UACServiceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _UACServiceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, UACServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static UACServicePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UACServicePrxHelper result = new UACServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
