// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cn.joy.ggg.api.service;

// <auto-generated>
//
// Generated from file `comment.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public abstract class _CommentServiceDisp extends Ice.ObjectImpl implements CommentService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::service::CommentService"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public final cn.joy.ggg.api.model.CommentResponse
    getCommentList(String appId, String cid, int start, int limit)
    {
        return getCommentList(appId, cid, start, limit, null);
    }

    public final cn.joy.ggg.api.model.CommentResponse
    postComment(String appId, String userId, String cid, String connect, boolean isAnonymity)
    {
        return postComment(appId, userId, cid, connect, isAnonymity, null);
    }

    public final cn.joy.ggg.api.model.CommentResponse
    removeComment(String appId, String cid, String commentIds)
    {
        return removeComment(appId, cid, commentIds, null);
    }

    public static Ice.DispatchStatus
    ___postComment(CommentService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String appId;
        appId = __is.readString();
        String userId;
        userId = __is.readString();
        String cid;
        cid = __is.readString();
        String connect;
        connect = __is.readString();
        boolean isAnonymity;
        isAnonymity = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        cn.joy.ggg.api.model.CommentResponse __ret = __obj.postComment(appId, userId, cid, connect, isAnonymity, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getCommentList(CommentService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String appId;
        appId = __is.readString();
        String cid;
        cid = __is.readString();
        int start;
        start = __is.readInt();
        int limit;
        limit = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        cn.joy.ggg.api.model.CommentResponse __ret = __obj.getCommentList(appId, cid, start, limit, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___removeComment(CommentService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String appId;
        appId = __is.readString();
        String cid;
        cid = __is.readString();
        String commentIds;
        commentIds = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        cn.joy.ggg.api.model.CommentResponse __ret = __obj.removeComment(appId, cid, commentIds, __current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getCommentList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "postComment",
        "removeComment"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getCommentList(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___postComment(this, in, __current);
            }
            case 6:
            {
                return ___removeComment(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type service::CommentService was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type service::CommentService was not generated with stream support";
        throw ex;
    }
}
