// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package cn.joy.ggg.api.model;

// <auto-generated>
//
// Generated from file `relation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public class UserRelation implements java.lang.Cloneable, java.io.Serializable
{
    public UAC initiator;

    public UAC taker;

    public UserRelation()
    {
    }

    public UserRelation(UAC initiator, UAC taker)
    {
        this.initiator = initiator;
        this.taker = taker;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UserRelation _r = null;
        try
        {
            _r = (UserRelation)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(initiator != _r.initiator && initiator != null && !initiator.equals(_r.initiator))
            {
                return false;
            }
            if(taker != _r.taker && taker != null && !taker.equals(_r.taker))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(initiator != null)
        {
            __h = 5 * __h + initiator.hashCode();
        }
        if(taker != null)
        {
            __h = 5 * __h + taker.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        initiator.__write(__os);
        taker.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        initiator = new UAC();
        initiator.__read(__is);
        taker = new UAC();
        taker.__read(__is);
    }

    public UAC getInitiator() {
      return initiator;
    }

    public void setInitiator(UAC initiator) {
      this.initiator = initiator;
    }

    public UAC getTaker() {
      return taker;
    }

    public void setTaker(UAC taker) {
      this.taker = taker;
    }
}
